services:
  rq-worker-1:
    build: ./gpu-service
    command: rq worker --url redis://redis:6379 --name facial_recognition_gpu1 --with-scheduler
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=qdrantapikey
      - QUEUE_NAMES=facial_recognition
      - CUDA_VISIBLE_DEVICES=1
    volumes:
      - ./transcriptions:/app/transcriptions
    depends_on:
      - redis
      - minio
      - qdrant
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['1']
              capabilities: [gpu]

  rq-worker-2:
    build: ./gpu-service
    command: rq worker --url redis://redis:6379 --name facial_recognition_gpu2 --with-scheduler
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=qdrantapikey
      - QUEUE_NAMES=facial_recognition
      - CUDA_VISIBLE_DEVICES=2
    volumes:
      - ./transcriptions:/app/transcriptions
    depends_on:
      - redis
      - minio
      - qdrant
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['2']
              capabilities: [gpu]

  # Additional workers for high-memory system
  rq-worker-3:
    build: ./gpu-service
    command: rq worker --url redis://redis:6379 --name facial_recognition_cpu1 --with-scheduler
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=qdrantapikey
      - QUEUE_NAMES=facial_recognition
    volumes:
      - ./transcriptions:/app/transcriptions
    depends_on:
      - redis
      - minio
      - qdrant

  rq-worker-4:
    build: ./gpu-service
    command: rq worker --url redis://redis:6379 --name facial_recognition_cpu2 --with-scheduler
    environment:
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=qdrantapikey
      - QUEUE_NAMES=facial_recognition
    volumes:
      - ./transcriptions:/app/transcriptions
    depends_on:
      - redis
      - minio
      - qdrant

  gpu-service:
    build: ./gpu-service
    ports:
      - "5001:5001"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=qdrantapikey
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
      - CUDA_VISIBLE_DEVICES=0
    depends_on:
      - qdrant
      - minio
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]

  lookup:
    build: ./lookup
    ports:
      - "5000:5000"
    volumes:
      - ./lookup:/app # Keeps source code in sync for dev
    environment:
      - GPU_WORKER_URL=http://gpu-service:5001/lookup
    depends_on:
      - gpu-service

  image-crawler:
    build: ./crawler
    # This service no longer needs to mount a volume, as all data goes to MinIO
    environment:
      - CRAWL_MODE=image
      - START_URL=https://www.flickr.com/search/?text=people/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
    depends_on:
      - minio
    restart: unless-stopped
    # Single crawler with smart concurrency management

  video-crawler:
    build: ./crawler
    environment:
      - CRAWL_MODE=video
      - START_URL=https://archive.org/details/movies
      - MINIO_ENDPOINT=minio:9000
      - MINIO_USER=${MINIO_ROOT_USER:-miniouser}
      - MINIO_PASSWORD=${MINIO_ROOT_PASSWORD:-miniopassword}
      - MINIO_BUCKET=scraped
    depends_on:
      - minio
    restart: unless-stopped
    # Single crawler with smart concurrency management
  
  redis:
    image: redis:8.2-rc1-bookworm
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - MINIO_ROOT_USER=miniouser
      - MINIO_ROOT_PASSWORD=miniopassword
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__API_KEY=qdrantapikey
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_storage:/qdrant/storage

volumes:
  qdrant_storage:
  minio_data:
  transcriptions:
  redis_data:
